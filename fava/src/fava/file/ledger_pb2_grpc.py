# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import ledger_pb2 as ledger__pb2
from . import shared_pb2 as shared__pb2


class BeanAccountServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SyncLedger = channel.unary_unary(
                '/phi.BeanAccountService/SyncLedger',
                request_serializer=ledger__pb2.SyncMessage.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DownLoadBeanAccountFile = channel.unary_stream(
                '/phi.BeanAccountService/DownLoadBeanAccountFile',
                request_serializer=shared__pb2.StringMessage.SerializeToString,
                response_deserializer=ledger__pb2.FileChunkMessage.FromString,
                )


class BeanAccountServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SyncLedger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownLoadBeanAccountFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BeanAccountServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SyncLedger': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncLedger,
                    request_deserializer=ledger__pb2.SyncMessage.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DownLoadBeanAccountFile': grpc.unary_stream_rpc_method_handler(
                    servicer.DownLoadBeanAccountFile,
                    request_deserializer=shared__pb2.StringMessage.FromString,
                    response_serializer=ledger__pb2.FileChunkMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'phi.BeanAccountService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BeanAccountService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SyncLedger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/phi.BeanAccountService/SyncLedger',
            ledger__pb2.SyncMessage.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownLoadBeanAccountFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/phi.BeanAccountService/DownLoadBeanAccountFile',
            shared__pb2.StringMessage.SerializeToString,
            ledger__pb2.FileChunkMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
