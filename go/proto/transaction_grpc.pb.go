// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: transaction.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionGWServiceClient is the client API for TransactionGWService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionGWServiceClient interface {
	GetTransactions(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (TransactionGWService_GetTransactionsClient, error)
	GetProviders(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (TransactionGWService_GetProvidersClient, error)
	GetAccounts(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (TransactionGWService_GetAccountsClient, error)
}

type transactionGWServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionGWServiceClient(cc grpc.ClientConnInterface) TransactionGWServiceClient {
	return &transactionGWServiceClient{cc}
}

func (c *transactionGWServiceClient) GetTransactions(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (TransactionGWService_GetTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionGWService_ServiceDesc.Streams[0], "/phi.TransactionGWService/GetTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionGWServiceGetTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionGWService_GetTransactionsClient interface {
	Recv() (*TinkTransactionMessage, error)
	grpc.ClientStream
}

type transactionGWServiceGetTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionGWServiceGetTransactionsClient) Recv() (*TinkTransactionMessage, error) {
	m := new(TinkTransactionMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionGWServiceClient) GetProviders(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (TransactionGWService_GetProvidersClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionGWService_ServiceDesc.Streams[1], "/phi.TransactionGWService/GetProviders", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionGWServiceGetProvidersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionGWService_GetProvidersClient interface {
	Recv() (*ProviderMessage, error)
	grpc.ClientStream
}

type transactionGWServiceGetProvidersClient struct {
	grpc.ClientStream
}

func (x *transactionGWServiceGetProvidersClient) Recv() (*ProviderMessage, error) {
	m := new(ProviderMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionGWServiceClient) GetAccounts(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (TransactionGWService_GetAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionGWService_ServiceDesc.Streams[2], "/phi.TransactionGWService/GetAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionGWServiceGetAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionGWService_GetAccountsClient interface {
	Recv() (*AccountMessage, error)
	grpc.ClientStream
}

type transactionGWServiceGetAccountsClient struct {
	grpc.ClientStream
}

func (x *transactionGWServiceGetAccountsClient) Recv() (*AccountMessage, error) {
	m := new(AccountMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionGWServiceServer is the server API for TransactionGWService service.
// All implementations must embed UnimplementedTransactionGWServiceServer
// for forward compatibility
type TransactionGWServiceServer interface {
	GetTransactions(*StringMessage, TransactionGWService_GetTransactionsServer) error
	GetProviders(*StringMessage, TransactionGWService_GetProvidersServer) error
	GetAccounts(*StringMessage, TransactionGWService_GetAccountsServer) error
	mustEmbedUnimplementedTransactionGWServiceServer()
}

// UnimplementedTransactionGWServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionGWServiceServer struct {
}

func (UnimplementedTransactionGWServiceServer) GetTransactions(*StringMessage, TransactionGWService_GetTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedTransactionGWServiceServer) GetProviders(*StringMessage, TransactionGWService_GetProvidersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProviders not implemented")
}
func (UnimplementedTransactionGWServiceServer) GetAccounts(*StringMessage, TransactionGWService_GetAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedTransactionGWServiceServer) mustEmbedUnimplementedTransactionGWServiceServer() {}

// UnsafeTransactionGWServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionGWServiceServer will
// result in compilation errors.
type UnsafeTransactionGWServiceServer interface {
	mustEmbedUnimplementedTransactionGWServiceServer()
}

func RegisterTransactionGWServiceServer(s grpc.ServiceRegistrar, srv TransactionGWServiceServer) {
	s.RegisterService(&TransactionGWService_ServiceDesc, srv)
}

func _TransactionGWService_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StringMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionGWServiceServer).GetTransactions(m, &transactionGWServiceGetTransactionsServer{stream})
}

type TransactionGWService_GetTransactionsServer interface {
	Send(*TinkTransactionMessage) error
	grpc.ServerStream
}

type transactionGWServiceGetTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionGWServiceGetTransactionsServer) Send(m *TinkTransactionMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionGWService_GetProviders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StringMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionGWServiceServer).GetProviders(m, &transactionGWServiceGetProvidersServer{stream})
}

type TransactionGWService_GetProvidersServer interface {
	Send(*ProviderMessage) error
	grpc.ServerStream
}

type transactionGWServiceGetProvidersServer struct {
	grpc.ServerStream
}

func (x *transactionGWServiceGetProvidersServer) Send(m *ProviderMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionGWService_GetAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StringMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionGWServiceServer).GetAccounts(m, &transactionGWServiceGetAccountsServer{stream})
}

type TransactionGWService_GetAccountsServer interface {
	Send(*AccountMessage) error
	grpc.ServerStream
}

type transactionGWServiceGetAccountsServer struct {
	grpc.ServerStream
}

func (x *transactionGWServiceGetAccountsServer) Send(m *AccountMessage) error {
	return x.ServerStream.SendMsg(m)
}

// TransactionGWService_ServiceDesc is the grpc.ServiceDesc for TransactionGWService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionGWService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "phi.TransactionGWService",
	HandlerType: (*TransactionGWServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _TransactionGWService_GetTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProviders",
			Handler:       _TransactionGWService_GetProviders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAccounts",
			Handler:       _TransactionGWService_GetAccounts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transaction.proto",
}
