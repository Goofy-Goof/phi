// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: gw.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TinkGWServiceClient is the client API for TinkGWService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinkGWServiceClient interface {
	ProvisionTinkUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProvisionTinkUserResponse, error)
	GetTinkAuthLink(ctx context.Context, in *BooleanFlagMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	ExchangeAuthCodeToToken(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
}

type tinkGWServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTinkGWServiceClient(cc grpc.ClientConnInterface) TinkGWServiceClient {
	return &tinkGWServiceClient{cc}
}

func (c *tinkGWServiceClient) ProvisionTinkUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProvisionTinkUserResponse, error) {
	out := new(ProvisionTinkUserResponse)
	err := c.cc.Invoke(ctx, "/phi.TinkGWService/ProvisionTinkUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinkGWServiceClient) GetTinkAuthLink(ctx context.Context, in *BooleanFlagMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/phi.TinkGWService/GetTinkAuthLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinkGWServiceClient) ExchangeAuthCodeToToken(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/phi.TinkGWService/ExchangeAuthCodeToToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinkGWServiceServer is the server API for TinkGWService service.
// All implementations must embed UnimplementedTinkGWServiceServer
// for forward compatibility
type TinkGWServiceServer interface {
	ProvisionTinkUser(context.Context, *emptypb.Empty) (*ProvisionTinkUserResponse, error)
	GetTinkAuthLink(context.Context, *BooleanFlagMessage) (*BytesMessage, error)
	ExchangeAuthCodeToToken(context.Context, *StringMessage) (*StringMessage, error)
	mustEmbedUnimplementedTinkGWServiceServer()
}

// UnimplementedTinkGWServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTinkGWServiceServer struct {
}

func (UnimplementedTinkGWServiceServer) ProvisionTinkUser(context.Context, *emptypb.Empty) (*ProvisionTinkUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionTinkUser not implemented")
}
func (UnimplementedTinkGWServiceServer) GetTinkAuthLink(context.Context, *BooleanFlagMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTinkAuthLink not implemented")
}
func (UnimplementedTinkGWServiceServer) ExchangeAuthCodeToToken(context.Context, *StringMessage) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeAuthCodeToToken not implemented")
}
func (UnimplementedTinkGWServiceServer) mustEmbedUnimplementedTinkGWServiceServer() {}

// UnsafeTinkGWServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinkGWServiceServer will
// result in compilation errors.
type UnsafeTinkGWServiceServer interface {
	mustEmbedUnimplementedTinkGWServiceServer()
}

func RegisterTinkGWServiceServer(s grpc.ServiceRegistrar, srv TinkGWServiceServer) {
	s.RegisterService(&TinkGWService_ServiceDesc, srv)
}

func _TinkGWService_ProvisionTinkUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinkGWServiceServer).ProvisionTinkUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phi.TinkGWService/ProvisionTinkUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinkGWServiceServer).ProvisionTinkUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinkGWService_GetTinkAuthLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BooleanFlagMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinkGWServiceServer).GetTinkAuthLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phi.TinkGWService/GetTinkAuthLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinkGWServiceServer).GetTinkAuthLink(ctx, req.(*BooleanFlagMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinkGWService_ExchangeAuthCodeToToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinkGWServiceServer).ExchangeAuthCodeToToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/phi.TinkGWService/ExchangeAuthCodeToToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinkGWServiceServer).ExchangeAuthCodeToToken(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TinkGWService_ServiceDesc is the grpc.ServiceDesc for TinkGWService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinkGWService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "phi.TinkGWService",
	HandlerType: (*TinkGWServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvisionTinkUser",
			Handler:    _TinkGWService_ProvisionTinkUser_Handler,
		},
		{
			MethodName: "GetTinkAuthLink",
			Handler:    _TinkGWService_GetTinkAuthLink_Handler,
		},
		{
			MethodName: "ExchangeAuthCodeToToken",
			Handler:    _TinkGWService_ExchangeAuthCodeToToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gw.proto",
}
